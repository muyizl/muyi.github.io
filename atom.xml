<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>技术博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://muyizl.github.io/"/>
  <updated>2019-03-03T07:48:11.758Z</updated>
  <id>https://muyizl.github.io/</id>
  
  <author>
    <name>木易</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IPv6审核问题</title>
    <link href="https://muyizl.github.io/2017/12/27/IPv6-Question/"/>
    <id>https://muyizl.github.io/2017/12/27/IPv6-Question/</id>
    <published>2017-12-27T05:19:11.000Z</published>
    <updated>2019-03-03T07:48:11.758Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>在最近一次项目审核被拒的问题中苹果提到了无法在IPv6环境下访问应用，因此做了一些问题排查。</p><div class="tabs" id="问题排查"><ul class="nav-tabs"><li class="tab active"><a href="#问题排查-1">测试客户端是否能够在IPv6环境下运行</a></li><li class="tab"><a href="#问题排查-2">测试服务器是否能够支持IPv6</a></li><li class="tab"><a href="#问题排查-3">测试苹果的服务器是否能够访问我们的ip地址</a></li></ul><div class="tab-content"><div class="tab-pane active" id="问题排查-1"><p>首先需要配置ipv6网络环境，配置方法自行百度或<span class="exturl" data-url="aHR0cDovL2ppbmd5YW4uYmFpZHUuY29tL2FydGljbGUvMGJjODA4ZmM1NmE5YmYxYmQ1ODViOTZkLmh0bWw="><i class="fa fa-external-link"></i> 看这里看这里…</span>。</p><div class="note "><p>问题：互联网共享界面为什么没有 ‘创建NAT64’ 这一选项<br>答案：请按住option打开共享。。。</p></div></div><div class="tab-pane" id="问题排查-2"><p>上一项通过证明你的客户端应用在 IPv6 网络下，是(基本)没有问题的，但是无法验证你的服务器能够对 IPv6 网络做出正确的响应。然而，苹果审核的时候，却是要去 DNS 服务器询问你的服务器的 IPv6 地址，然后进行访问。如果查询不到 IPv6 地址，可能会进而询问 IPv4 地址，然后进行转换使用。苹果明确表示服务器不需要支持 IPv6，但是必须正确响应 IPv6 的 DNS 查询。</p><p>如何验证呢？使用以下命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig +nocmd +nostats example.com AAAA</span><br></pre></td></tr></table></figure><p>如果返回的 status 为 NOERROR， 那基本就没什么问题，但是一定要在多个网络环境下测试都通过才行。如果返回的是其他的响应，尤其是 SERVFAIL 的情况，那就基本杯具了。由于你已经验证了客户端没有问题，现在要做的，就是找相关人员查看 DNS 配置，直到稳定返回 NOERROR 为止，详情见<span class="exturl" data-url="aHR0cHM6Ly9mb3J1bXMuZGV2ZWxvcGVyLmFwcGxlLmNvbS9tZXNzYWdlLzE0NzU3OSMxNDc1Nzk="><i class="fa fa-external-link"></i> IPv6 and App Review</span>。</p></div><div class="tab-pane" id="问题排查-3"><p>因为本次遇到的问题并不属于这一范畴也就没有去做相关的了解，目前所了解到的方式是通过支持IPv6的主机转接到海外，能力有限不多描述。苹果审核IPv6解决思路可以参考该<span class="exturl" data-url="aHR0cDovL3d3dy5tYW1pY29kZS5jb20vaW5mby1kZXRhaWwtMTUwMTU3Mi5odG1s"><i class="fa fa-external-link"></i> 文章</span>。</p></div></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;在最近一次项目审核被拒的问题中苹果提到了无法在IPv6环境下访问应用，因此做了一些问题排查。&lt;/p&gt;
&lt;div class=&quot;tabs&quot; i
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://muyizl.github.io/categories/Objective-C/"/>
    
    
      <category term="IPv6" scheme="https://muyizl.github.io/tags/IPv6/"/>
    
      <category term="审核" scheme="https://muyizl.github.io/tags/%E5%AE%A1%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>iPhone X 界面适配方案</title>
    <link href="https://muyizl.github.io/2017/12/27/iPhoneX-Layout/"/>
    <id>https://muyizl.github.io/2017/12/27/iPhoneX-Layout/</id>
    <published>2017-12-27T05:18:37.000Z</published>
    <updated>2019-03-03T07:59:57.856Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>苹果WWDC开发者大会上，终于发布了大家期待已久的iOS 11。同时还发布了iPhone X全面屏手机，这也是首款采用OLED屏幕的iPhone手机，iPhone X顶部为了给摄像头、传感器留出了空间，所以整体的设计是一个异形屏幕。</p><p>对于开发者而言，对于不同机型的UI适配需要做一定的调整。针对可能出现的问题，苹果在<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2lwaG9uZS8="><i class="fa fa-external-link"></i> developer.apple.com</span> 上给出了一些建议。其中一个是<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2lvcy9odW1hbi1pbnRlcmZhY2UtZ3VpZGVsaW5lcy9vdmVydmlldy9pcGhvbmUteC8="><i class="fa fa-external-link"></i> Human Interface Guideline</span> 。另外 WWDC 会议官方 App 的作者，也给出了适配时的一些<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL3ZpZGVvcy9wbGF5L2ZhbGwyMDE3LzIwMS8="><i class="fa fa-external-link"></i> 经验(视频资料)</span>。</p><h4 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h4><p>下图是 iPhone X 对比其他机型的变化部分。iPhone X 和 iPhone 8 的宽度一致，在垂直方向上多了145pt。</p><span itemprop="image" itemscope itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/assets/img/iPhoneX01.png" class="full-image" alt="alt" title="iPhone X 与其他设备比较图"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p>其实主要区别在：</p><ul><li>主视图高度增加 [145pt]</li><li>StatusBar 高度增加 [iPhone X ? 44 : 20]</li><li>TabBar 高度增加 [iPhone X ? 83 : 49]</li></ul><p>显然对于开发而言需要处理好 StatusBar 和 TabBar 的高度问题。对于非iPhone X机型而言同样也有StatusBar高度发生变化的时候，例如：开启热点、微信QQ电话后台运行、涉及使用后台功能等，此时StatusBar的高度会从20变更为40，如果不做处理的话会出现部分问题。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>本文提供了两种适配方案，可以针对项目的不同情况采用不同的方案。</p><a id="more"></a><h5 id="方案一：固定布局【主要针对存在大量手写Frame的项目】"><a href="#方案一：固定布局【主要针对存在大量手写Frame的项目】" class="headerlink" title="方案一：固定布局【主要针对存在大量手写Frame的项目】"></a>方案一：固定布局【主要针对存在大量手写Frame的项目】</h5><p>除非项目中有太多手写的frame，改到你怀疑人生，请采用此方案。</p><p>定义宏来标出各种情况下的的高度适配，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// UIScreen width.</span><br><span class="line">#define  GJJ_ScreenWidth [UIScreen mainScreen].bounds.size.width</span><br><span class="line"></span><br><span class="line">// UIScreen height.</span><br><span class="line">#define  GJJ_ScreenHeight [UIScreen mainScreen].bounds.size.height</span><br><span class="line"></span><br><span class="line">// iPhone X </span><br><span class="line">#define  GJJ_iPhoneX (GJJ_ScreenWidth == 375.f &amp;&amp; GJJ_ScreenHeight == 812.f ? YES : NO)</span><br><span class="line"></span><br><span class="line">// Status bar height.</span><br><span class="line">#define  GJJ_StatusBarHeight (GJJ_iPhoneX ? 44.f : 20.f)</span><br><span class="line"></span><br><span class="line">// Navigation bar height.</span><br><span class="line">#define  GJJ_NavigationBarHeight  44.f</span><br><span class="line"></span><br><span class="line">// Tabbar height.</span><br><span class="line">#define  GJJ_TabbarHeight (GJJ_iPhoneX ? (49.f+34.f) : 49.f)</span><br><span class="line"></span><br><span class="line">// Tabbar safe bottom margin.</span><br><span class="line">#define  GJJ_TabbarSafeBottomMargin (GJJ_iPhoneX ? 34.f : 0.f)</span><br><span class="line"></span><br><span class="line">// Status bar &amp; navigation bar height.</span><br><span class="line">#define  GJJ_StatusBarAndNavigationBarHeight  (GJJ_iPhoneX ? 88.f : 64.f)</span><br><span class="line"></span><br><span class="line">#define GJJ_ViewSafeAreInsets(view) (&#123;UIEdgeInsets insets; if(@available(iOS 11.0, *)) &#123;insets = view.safeAreaInsets;&#125; else &#123;insets = UIEdgeInsetsZero;&#125; insets;&#125;)</span><br></pre></td></tr></table></figure><p>但是这种方案不仅难以应对复杂的状态，而且更加难以根据状态做有效的高度变化。</p><h5 id="勉强优化："><a href="#勉强优化：" class="headerlink" title="勉强优化："></a>勉强优化：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CGFloat heightOfNavigationBar = self.navigationController.navigationBar.frame.size.height;</span><br><span class="line">CGFloat heightOfStatusBar = [[UIApplication sharedApplication] statusBarFrame].size.height;</span><br><span class="line">CGFloat heightOfTabBar = self.tabBarController.tabBar.frame.size.height;</span><br></pre></td></tr></table></figure><p>然后监听系统的 <code>UIApplicationWillChangeStatusBarFrameNotification</code> 事件，可以在 StatusBar 的 frame 变更的时候收到通知，再对UI进行布局调整。</p><h5 id="方案二：Safe-Area"><a href="#方案二：Safe-Area" class="headerlink" title="方案二：Safe Area"></a>方案二：Safe Area</h5><p>在iOS7推出时，在预定要使用全屏布局的时候采取：<code>UIViewController (UILayoutSupport)</code> 的<code>topLayoutGuide</code> 和 <code>bottomLayoutGuide</code>，这两个在 iOS 11 中被 <code>[UIView safeAreaLayoutGuide]</code> 取代了。（对于<code>safeAreaLayoutGuide</code>不太了解的可以看一下相关资料 ）</p><p>如果项目中不需要做横屏的适配也可以采用<code>UILayoutSupport</code> + <code>AutoLayout</code> 的方式，为了更好的适配横竖屏采用safeArea的方式更优。</p><p>safeArea 是描述你的视图部分不被任何内容遮挡的方法。 它提供两种方式：<code>safeAreaInsets</code> 或 <code>safeAreaLayoutGuide</code> 来提供给你 safeArea 的参照值，即 insets 或者 layout guide。</p><p>以下是使用<code>safeAreaLayoutGuide</code> 作为UI布局媒介来辅助布局：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">UIView *view = [[UIView alloc]initWithFrame:CGRectZero];</span><br><span class="line">view.backgroundColor = [UIColor redColor];</span><br><span class="line">[self.view addSubview:view];</span><br><span class="line">view.translatesAutoresizingMaskIntoConstraints = NO;</span><br><span class="line">[NSLayoutConstraint activateConstraints:</span><br><span class="line">@[[view.topAnchor constraintEqualToAnchor:self.view.safeAreaLayoutGuide.topAnchor],</span><br><span class="line">  [view.bottomAnchor constraintEqualToAnchor:self.view.safeAreaLayoutGuide.bottomAnchor],</span><br><span class="line">  [view.leadingAnchor constraintEqualToAnchor:self.view.safeAreaLayoutGuide.leadingAnchor constant:10],</span><br><span class="line">  [view.widthAnchor constraintEqualToConstant:100]]];</span><br></pre></td></tr></table></figure><p>其界面展示如下图所示：</p><span itemprop="image" itemscope itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/assets/img/iPhoneX02.png" class="full-image" alt="alt" title="iPhone X safeAreaLayoutGuide布局图"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p>可以看到，红色的图层被完整地显示在界面内。</p><h5 id="Masnary"><a href="#Masnary" class="headerlink" title="Masnary"></a>Masnary</h5><p>推荐大家使用Masnary库，可以更加方便的进行UI布局，对于上面例子使用masnary可以作如下操作：</p><h6 id="safeAreaLayoutGuide："><a href="#safeAreaLayoutGuide：" class="headerlink" title="safeAreaLayoutGuide："></a>safeAreaLayoutGuide：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[view mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        make.top.equalTo(self.view.mas_safeAreaLayoutGuideTop);</span><br><span class="line">        make.left.equalTo(self.view.mas_safeAreaLayoutGuideLeft);</span><br><span class="line">        make.right.equalTo(self.view.mas_safeAreaLayoutGuideRight);</span><br><span class="line">        make.height.equalTo(@100);</span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure><p>相关链接：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1NuYXBLaXQvTWFzb25yeQ=="><i class="fa fa-external-link"></i> Masnary(OC)</span> 、<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1NuYXBLaXQvU25hcEtpdA=="><i class="fa fa-external-link"></i> SnapKit</span></p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>全面屏：iPhoneX适配可以采用Safe Area方案，非iPhone X依旧可以采用<code>UILayoutSupport</code> + <code>AutoLayout</code> 的方式。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;苹果WWDC开发者大会上，终于发布了大家期待已久的iOS 11。同时还发布了iPhone X全面屏手机，这也是首款采用OLED屏幕的iPhone手机，iPhone X顶部为了给摄像头、传感器留出了空间，所以整体的设计是一个异形屏幕。&lt;/p&gt;
&lt;p&gt;对于开发者而言，对于不同机型的UI适配需要做一定的调整。针对可能出现的问题，苹果在&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2lwaG9uZS8=&quot;&gt;&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt; developer.apple.com&lt;/span&gt; 上给出了一些建议。其中一个是&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2lvcy9odW1hbi1pbnRlcmZhY2UtZ3VpZGVsaW5lcy9vdmVydmlldy9pcGhvbmUteC8=&quot;&gt;&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt; Human Interface Guideline&lt;/span&gt; 。另外 WWDC 会议官方 App 的作者，也给出了适配时的一些&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL3ZpZGVvcy9wbGF5L2ZhbGwyMDE3LzIwMS8=&quot;&gt;&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt; 经验(视频资料)&lt;/span&gt;。&lt;/p&gt;
&lt;h4 id=&quot;主要问题&quot;&gt;&lt;a href=&quot;#主要问题&quot; class=&quot;headerlink&quot; title=&quot;主要问题&quot;&gt;&lt;/a&gt;主要问题&lt;/h4&gt;&lt;p&gt;下图是 iPhone X 对比其他机型的变化部分。iPhone X 和 iPhone 8 的宽度一致，在垂直方向上多了145pt。&lt;/p&gt;
&lt;span itemprop=&quot;image&quot; itemscope itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;/assets/img/iPhoneX01.png&quot; class=&quot;full-image&quot; alt=&quot;alt&quot; title=&quot;iPhone X 与其他设备比较图&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;p&gt;其实主要区别在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主视图高度增加 [145pt]&lt;/li&gt;
&lt;li&gt;StatusBar 高度增加 [iPhone X ? 44 : 20]&lt;/li&gt;
&lt;li&gt;TabBar 高度增加 [iPhone X ? 83 : 49]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;显然对于开发而言需要处理好 StatusBar 和 TabBar 的高度问题。对于非iPhone X机型而言同样也有StatusBar高度发生变化的时候，例如：开启热点、微信QQ电话后台运行、涉及使用后台功能等，此时StatusBar的高度会从20变更为40，如果不做处理的话会出现部分问题。&lt;/p&gt;
&lt;h4 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h4&gt;&lt;p&gt;本文提供了两种适配方案，可以针对项目的不同情况采用不同的方案。&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://muyizl.github.io/categories/Objective-C/"/>
    
    
      <category term="iPhone X" scheme="https://muyizl.github.io/tags/iPhone-X/"/>
    
      <category term="适配" scheme="https://muyizl.github.io/tags/%E9%80%82%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>理解.gitignore配置Git代码库</title>
    <link href="https://muyizl.github.io/2017/12/27/ios-gitignore/"/>
    <id>https://muyizl.github.io/2017/12/27/ios-gitignore/</id>
    <published>2017-12-27T05:17:55.000Z</published>
    <updated>2019-03-03T08:01:21.680Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>项目多人参与开发的话，为了便于代码管理，提高代码合并效率，往往会在项目部署远程库的时候配置.gitignore，因此也是需要了解一些.gitignore的模式格式。</p><a id="more"></a><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>一个<code>gitignore</code>文件指定Git应该忽略的有意未覆盖的文件。已经由Git跟踪的文件不受影响。<code>gitignore</code>文件中的每一行都指定一个模式。在决定是否忽略路径时，Git通常会检查 <code>gitignore</code>来自多个来源的模式，并按照以下优先顺序从高到低（在一个优先级内，最后一个匹配模式决定结果）：</p><ul><li>从命令行读取模式以查看那些支持它们的命令。</li><li>从<code>.gitignore</code>与路径相同的目录中的文件或任何父目录中的文件中读取模式，其中较高级别文件中的模式（直到工作树的顶层）由较低级别文件中的模式覆盖到包含文件。这些模式相对于<code>.gitignore</code>文件的位置相匹配 。一个项目通常<code>.gitignore</code>在其存储库中包含这些文件，其中包含作为项目构建一部分生成的文件的模式。</li><li>模式读取<code>$GIT_DIR/info/exclude</code>。</li><li>模式从配置变量指定的文件中读取<code>core.excludesFile</code>。</li></ul><p>放置模式的文件取决于模式是如何使用的。</p><ul><li>应该由版本控制并通过克隆（即所有开发人员将要忽略的<code>.gitignore</code>文件）分发到其他存储库的模式应该放到文件中。</li><li>特定于特定存储库但不需要与其他相关存储库共享的模式（例如，存储在存储库内但是特定于一个用户的工作流的辅助文件）应该进入该<code>$GIT_DIR/info/exclude</code>文件。</li><li>在所有情况下用户希望Git忽略的模式（例如，由用户选择的编辑器生成的备份或临时文件）通常进入<code>core.excludesFile</code>用户指定的文件 <code>~/.gitconfig</code>。它的默认值是$ XDG_CONFIG_HOME / git / ignore。如果$ XDG_CONFIG_HOME未设置或为空，则改为使用$ HOME / .config / git / ignore。</li></ul><p>基础的Git管道工具（如 <em>git ls-files</em>和<em>git read-tree</em>）读取<code>gitignore</code>由命令行选项指定的模式，或者从命令行选项指定的文件中读取 模式。更高级别的Git工具，比如<em>git status</em>和<em>git add</em>，使用来自上面指定源的模式。</p><h4 id="模式格式"><a href="#模式格式" class="headerlink" title="模式格式"></a>模式格式</h4><ul><li><p>空行不匹配任何文件，所以它可以作为可读性的分隔符。</p></li><li><p>以＃开头的行作为注释。需要<code>#</code>的地方要进行转义（“ <code>\</code>”）。</p></li><li><p>尾部空格将被忽略，除非用反斜杠（“ <code>\</code>”）转义。</p></li><li><p><code>!</code>意味着<code>取反</code>，即原本被匹配上的文件被忽略，加上<code>!</code>后，这些文件则被包含进来，需要<code>!</code>的地方要要进行转意。如果排除该文件的父目录，则不可能重新包含文件。由于性能的原因，Git没有列出排除的目录，所以包含文件的任何模式都不起作用，不管它们在哪里定义。<code>\</code>在第一个“ <code>!</code>”之前放置一个反斜杠（“ ”），用于以“ ”开始的模式，<code>!</code>例如“ <code>\!important!.txt</code>”。</p></li><li><p>如果【模式以斜线结尾】，则为了以下描述的目的将其移除，但是它只能找到与目录匹配的内容。换句话说，<code>foo/</code>将匹配一个目录<code>foo</code>和下面的路径，但不匹配一个普通的文件或符号链接<code>foo</code>（这与在Git中通常如何工作的方式是一致的）。</p></li><li><p>如果【模式不包含斜杠<em>/</em>】，Git会将其视为shell glob模式，并检查与<code>.gitignore</code>文件位置相关的路径名的匹配（相对于工作树的顶层，如果不是来自 <code>.gitignore</code>文件的话）。</p></li><li><p>如果【模式包含斜杠<em>/</em>】，Git会将该模式视为适合fnmatch（3）与FNM_PATHNAME标志一起使用的shell glob：模式中的通配符不会与路径名中的/匹配。例如，“Documentation / *。html”匹配“Documentation / git.html”，但不匹配“Documentation / ppc / ppc.html”或“tools / perf / Documentation / perf.html”。</p></li><li><p>以【斜杠开头的模式】匹配路径名的开头。例如，“/*.c”与“cat-file.c”匹配，但不匹配“mozilla-sha1 / sha1.c”。</p><blockquote><p>注意：</p><ul><li><code>/</code>和<code>*</code>，即模式中有<code>/</code>的时候<code>*</code>不匹配<code>/</code>，模式中没有<code>/</code>的时候<code>*</code>可以匹配<code>/</code>。</li></ul><ul><li>以<code>/</code>结尾的模式只会匹配本身及其子目录，若<code>*/</code>会匹配所有的目录，这一点常常结合<code>!</code>不能把父目录被忽略的文件重新包含进来这条规则来用。</li></ul></blockquote><p>​</p></li></ul><p><code>**</code>与全路径匹配的模式中的两个连续的星号（“ ”）可能具有特殊的含义：</p><ul><li>前面的“ <code>**</code>”后跟一个斜杠表示所有目录匹配。例如，“ <code>**/foo</code>”与文件或目录“ ”相匹配<code>foo</code>，与模式“ <code>foo</code>” 相同。“ <code>**/foo/bar</code>”与<code>bar</code>直接位于目录“ <code>foo</code>” 下的任何地方匹配文件或目录“ ”。</li><li>尾随“ <code>/**</code>”匹配内部的一切。例如，“ <code>abc/**</code>”匹配文件<code>abc</code>位置相对于目录“ ” 内的所有<code>.gitignore</code>文件，具有无限深度。</li><li>斜杠后跟两个连续的星号，则斜线匹配零个或多个目录。例如，“ <code>a/**/b</code>”匹配“ <code>a/b</code>”，“ <code>a/x/b</code>”，“ <code>a/x/y/b</code>”等。</li><li>其他连续的星号被认为是无效的。</li></ul><h4 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h4><h5 id="忽略某个文件夹"><a href="#忽略某个文件夹" class="headerlink" title="忽略某个文件夹"></a>忽略某个文件夹</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 忽略build目录</span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line"># 忽略build目录中的所有内容，但是不忽略build目录本身，</span><br><span class="line"># 该条pattern中包含斜杠，所以wildcards不能匹配斜杠，</span><br><span class="line"># 于是这个pattern的作用就是把build/里面的文件、文件夹</span><br><span class="line"># 全都忽略了，但是由于&quot;parent dir&quot;被忽略的文件不能被</span><br><span class="line"># 包含进来，所以build目录的子目录中的所有文件、文件夹</span><br><span class="line"># 也都被一并忽略了</span><br><span class="line">build/*</span><br></pre></td></tr></table></figure><h5 id="忽略某类文件"><a href="#忽略某类文件" class="headerlink" title="忽略某类文件"></a>忽略某类文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 忽略所有的.DS_Store文件</span><br><span class="line"># 由于pattern中没有斜杠(/)，所以这个pattern被当作shell glob</span><br><span class="line"># 来进行匹配，它可以匹配斜杠(/)，所以诸如&quot;build/outputs/aaa.DS_Store&quot;</span><br><span class="line"># 这样的.DS_Store文件均被忽略了，从而达到忽略所有.DS_Store文件目的</span><br><span class="line">*.DS_Store</span><br></pre></td></tr></table></figure><h5 id="忽略某个文件夹并保留某些特殊文件"><a href="#忽略某个文件夹并保留某些特殊文件" class="headerlink" title="忽略某个文件夹并保留某些特殊文件"></a>忽略某个文件夹并保留某些特殊文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 忽略build目录，但是保留build/config.xml文件</span><br><span class="line">build/*</span><br><span class="line">!build/config.xml</span><br></pre></td></tr></table></figure><h5 id="建立白名单，只保留某些文件夹或者目录"><a href="#建立白名单，只保留某些文件夹或者目录" class="headerlink" title="建立白名单，只保留某些文件夹或者目录"></a>建立白名单，只保留某些文件夹或者目录</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 忽略一切</span><br><span class="line">*</span><br><span class="line"># 把想要的文件或文件夹重新包含进来</span><br><span class="line">!src/**</span><br><span class="line">!.pbxuser</span><br><span class="line"># 如果不把所有文件夹包含进来，则需要先把res/目录包含进来才行</span><br><span class="line">!res/drawable/**</span><br></pre></td></tr></table></figure><span class="exturl" data-url="aHR0cDovL2dpdC1zY20uY29tL2RvY3MvZ2l0aWdub3Jl"><i class="fa fa-external-link"></i> 参考文献</span><h4 id="iOS-gitignore文件内容"><a href="#iOS-gitignore文件内容" class="headerlink" title="iOS .gitignore文件内容"></a>iOS .gitignore文件内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># Xcode</span><br><span class="line">.DS_Store</span><br><span class="line">*/build/*</span><br><span class="line">*.pbxuser</span><br><span class="line">!default.pbxuser</span><br><span class="line">*.mode1v3</span><br><span class="line">!default.mode1v3</span><br><span class="line">*.mode2v3</span><br><span class="line">!default.mode2v3</span><br><span class="line">*.perspectivev3</span><br><span class="line">!default.perspectivev3</span><br><span class="line">xcuserdata</span><br><span class="line">profile</span><br><span class="line">*.moved-aside</span><br><span class="line">DerivedData</span><br><span class="line">.idea/</span><br><span class="line">*.hmap</span><br><span class="line">*.xccheckout</span><br><span class="line">*.xcworkspace</span><br><span class="line">!default.xcworkspace</span><br><span class="line"></span><br><span class="line">#CocoaPods</span><br><span class="line">Pods</span><br><span class="line">!Podfile</span><br><span class="line">!Podfile.lock</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;项目多人参与开发的话，为了便于代码管理，提高代码合并效率，往往会在项目部署远程库的时候配置.gitignore，因此也是需要了解一些.gitignore的模式格式。&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://muyizl.github.io/categories/Objective-C/"/>
    
    
      <category term=".gitignore" scheme="https://muyizl.github.io/tags/gitignore/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C Style Guides</title>
    <link href="https://muyizl.github.io/2017/12/19/Objective-C-Style-Guides-Chinese/"/>
    <id>https://muyizl.github.io/2017/12/19/Objective-C-Style-Guides-Chinese/</id>
    <published>2017-12-19T06:41:33.000Z</published>
    <updated>2019-03-03T06:56:43.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#语言">语言</a> </li><li><a href="#代码组织">代码组织</a></li><li><a href="#空格">空格</a></li><li><a href="#注释">注释</a></li><li><a href="#命名">命名</a><ul><li><a href="#下划线">下划线</a></li></ul></li><li><a href="#方法">方法</a></li><li><a href="#变量">变量</a></li><li><a href="#属性特性">属性特性</a></li><li><a href="#点符号语法">点符号语法</a></li><li><a href="#字面值">字面值</a></li><li><a href="#常量">常量</a></li><li><a href="#枚举类型">枚举类型</a></li><li><a href="#Case语句">Case语句</a></li><li><a href="#私有属性">私有属性</a></li><li><a href="#布尔值">布尔值</a></li><li><a href="#条件语句">条件语句</a><ul><li><a href="#三元操作符">三元操作符</a></li></ul></li><li><a href="#Init方法">Init方法</a></li><li><a href="#类构造方法">类构造方法</a></li><li><a href="#CGRect函数">CGRect函数</a></li><li><a href="#黄金路径">黄金路径</a></li><li><a href="#错误处理">错误处理</a></li><li><a href="#单例模式">单例模式</a></li><li><a href="#换行符">换行符</a></li><li><a href="#Xcode工程">Xcode工程</a><a id="more"></a></li></ul><h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><p>使用美式英语拼写。</p><p><strong>建议使用:</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIColor</span> *myColor = [<span class="built_in">UIColor</span> whiteColor];</span><br></pre></td></tr></table></figure></p><p><strong>不建议使用:</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIColor</span> *myColour = [<span class="built_in">UIColor</span> whiteColor];</span><br></pre></td></tr></table></figure></p><h2 id="代码组织"><a href="#代码组织" class="headerlink" title="代码组织"></a>代码组织</h2><p>在函数分组和protocol/delegate实现中使用<code>#pragma mark -</code>来分类方法，要遵循以下一般结构：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#pragma mark - Lifecycle</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;&#125;</span><br><span class="line">- (<span class="keyword">void</span>)dealloc &#123;&#125;</span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;&#125;</span><br><span class="line">- (<span class="keyword">void</span>)viewWillAppear:(<span class="built_in">BOOL</span>)animated &#123;&#125;</span><br><span class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - Custom Accessors</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setCustomProperty:(<span class="keyword">id</span>)value &#123;&#125;</span><br><span class="line">- (<span class="keyword">id</span>)customProperty &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - IBActions</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">IBAction</span>)submitData:(<span class="keyword">id</span>)sender &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - Public</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)publicMethod &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - Private</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)privateMethod &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - Protocol conformance</span></span><br><span class="line"><span class="meta">#pragma mark - UITextFieldDelegate</span></span><br><span class="line"><span class="meta">#pragma mark - UITableViewDataSource</span></span><br><span class="line"><span class="meta">#pragma mark - UITableViewDelegate</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - NSCopying</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)copyWithZone:(<span class="built_in">NSZone</span> *)zone &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - NSObject</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)description &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><ul><li>缩进使用4个空格，确保在Xcode偏好设置来设置。</li><li>方法大括号和其他大括号(<code>if</code>/<code>else</code>/<code>switch</code>/<code>while</code> 等.)总是在同一行语句打开但在新行中关闭。</li></ul><p><strong>建议使用:</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (user.isHappy) &#123;</span><br><span class="line">    <span class="comment">//Do something</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//Do something else</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>不建议使用:</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (user.isHappy) </span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//Do something</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//Do something else</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>在方法之间应该有且只有一行，这样有利于在视觉上更清晰和更易于组织。在方法内的空白应该分离功能，但通常都抽离出来成为一个新方法</li><li>优先使用auto-synthesis。但如果有必要，<code>@synthesize</code>和<code>@dynamic</code>应该在实现中每个都声明新的一行。</li><li>应该避免以冒号对齐的方式来调用方法。因为有时方法签名可能有3个以上的冒号和冒号对齐会使代码更加易读。请<strong>不要这样做</strong>，尽管冒号对齐的方法包含代码块，因为Xcode的对齐方式令它难以辨认。</li></ul><p><strong>建议使用:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// blocks are easily readable</span></span><br><span class="line">[<span class="built_in">UIView</span> animateWithDuration:<span class="number">1.0</span> animations:^&#123;</span><br><span class="line">  <span class="comment">// something</span></span><br><span class="line">&#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">  <span class="comment">// something</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p><strong>不建议使用:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// colon-aligning makes the block indentation hard to read</span></span><br><span class="line">[<span class="built_in">UIView</span> animateWithDuration:<span class="number">1.0</span></span><br><span class="line">                 animations:^&#123;</span><br><span class="line">                     <span class="comment">// something</span></span><br><span class="line">                 &#125;</span><br><span class="line">                 completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">                     <span class="comment">// something</span></span><br><span class="line">                 &#125;];</span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>当需要注释时，注释应该用来解释这段特殊代码<strong>为什么</strong>要这样做。任何被使用的注释都必须保持最新或被删除。</p><p>一般都避免使用块注释，因为代码尽可能做到自解释，只有当断断续续或几行代码时才需要注释。<em>例外：这不应用在生成文档的注释。</em></p><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><p>Apple命名规则尽可能坚持，特别是与这些相关的<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvbWFjLyNkb2N1bWVudGF0aW9uL0NvY29hL0NvbmNlcHR1YWwvTWVtb3J5TWdtdC9BcnRpY2xlcy9NZW1vcnlNZ210Lmh0bWw="><i class="fa fa-external-link"></i> memory management rules</span><span class="exturl" data-url="aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjg2NTE5NC8zNDA1MDg="><i class="fa fa-external-link"></i> NARC</span></p><p>长的，描述性的方法和变量命名是好的。</p><p><strong>建议使用:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIButton</span> *settingsButton;</span><br></pre></td></tr></table></figure><p><strong>不建议使用:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIButton</span> *setBut;</span><br></pre></td></tr></table></figure><p>三个字符前缀应该经常用在类和常量命名，但在Core Data的实体名中应被忽略。对于官方的raywenderlich.com书、初学者工具包或教程，前缀’RWT’应该被使用。</p><p>常量应该使用驼峰式命名规则，所有的单词首字母大写和加上与类名有关的前缀。</p><p><strong>建议使用:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">NSTimeInterval</span> <span class="keyword">const</span> RWTTutorialViewControllerNavigationFadeAnimationDuration = <span class="number">0.3</span>;</span><br></pre></td></tr></table></figure><p><strong>不建议使用:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">NSTimeInterval</span> <span class="keyword">const</span> fadetime = <span class="number">1.7</span>;</span><br></pre></td></tr></table></figure><p>属性也是使用驼峰式，但首单词的首字母小写。对属性使用auto-synthesis，而不是手动编写@synthesize语句，除非你有一个好的理由。</p><p><strong>建议使用:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *descriptiveVariableName;</span><br></pre></td></tr></table></figure><p><strong>不建议使用:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">id</span> varnm;</span><br></pre></td></tr></table></figure><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>当使用属性时，实例变量应该使用<code>self.</code>来访问和改变。这就意味着所有属性将会视觉效果不同，因为它们前面都有<code>self.</code>。</p><p>但有一个特例：在初始化方法里，实例变量(例如，_variableName)应该直接被使用来避免getters/setters潜在的副作用。</p><p>局部变量不应该包含下划线。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>在方法签名中，应该在方法类型(-/+ 符号)之后有一个空格。在方法各个段之间应该也有一个空格(符合Apple的风格)。在参数之前应该包含一个具有描述性的关键字来描述参数。</p><p>“and”这个词的用法应该保留。它不应该用于多个参数来说明，就像<code>initWithWidth:height</code>以下这个例子：</p><p><strong>建议使用:</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setExampleText:(<span class="built_in">NSString</span> *)text image:(<span class="built_in">UIImage</span> *)image;</span><br><span class="line">- (<span class="keyword">void</span>)sendAction:(SEL)aSelector to:(<span class="keyword">id</span>)anObject forAllCells:(<span class="built_in">BOOL</span>)flag;</span><br><span class="line">- (<span class="keyword">id</span>)viewWithTag:(<span class="built_in">NSInteger</span>)tag;</span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithWidth:(<span class="built_in">CGFloat</span>)width height:(<span class="built_in">CGFloat</span>)height;</span><br></pre></td></tr></table></figure></p><p><strong>不建议使用:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)setT:(<span class="built_in">NSString</span> *)text i:(<span class="built_in">UIImage</span> *)image;</span><br><span class="line">- (<span class="keyword">void</span>)sendAction:(SEL)aSelector :(<span class="keyword">id</span>)anObject :(<span class="built_in">BOOL</span>)flag;</span><br><span class="line">- (<span class="keyword">id</span>)taggedView:(<span class="built_in">NSInteger</span>)tag;</span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithWidth:(<span class="built_in">CGFloat</span>)width andHeight:(<span class="built_in">CGFloat</span>)height;</span><br><span class="line">- (<span class="keyword">instancetype</span>)initWith:(<span class="keyword">int</span>)width and:(<span class="keyword">int</span>)height;  <span class="comment">// Never do this.</span></span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量尽量以描述性的方式来命名。单个字符的变量命名应该尽量避免，除了在<code>for()</code>循环。</p><p>星号表示变量是指针。例如，<code>NSString *text</code> 既不是 <code>NSString* text</code> 也不是 <code>NSString * text</code>，除了一些特殊情况下常量。</p><p><a href="#私有变量">私有变量</a>应该尽可能代替实例变量的使用。尽管使用实例变量是一种有效的方式，但更偏向于使用属性来保持代码一致性。</p><p>通过使用’back’属性(_variable，变量名前面有下划线)直接访问实例变量应该尽量避免，除了在初始化方法(<code>init</code>, <code>initWithCoder:</code>, 等…)，<code>dealloc</code> 方法和自定义的setters和getters。想了解关于如何在初始化方法和dealloc直接使用Accessor方法的更多信息，查看<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvbWFjL2RvY3VtZW50YXRpb24vQ29jb2EvQ29uY2VwdHVhbC9NZW1vcnlNZ210L0FydGljbGVzL21tUHJhY3RpY2FsLmh0bWwjLy9hcHBsZV9yZWYvZG9jL3VpZC9UUDQwMDA0NDQ3LVNXNg=="><i class="fa fa-external-link"></i> 这里</span>。</p><p><strong>建议使用:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RWTTutorial</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *tutorialName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><strong>不建议使用:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RWTTutorial</span> : <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">  <span class="built_in">NSString</span> *tutorialName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="属性特性"><a href="#属性特性" class="headerlink" title="属性特性"></a>属性特性</h2><p>所有属性特性应该显式地列出来，有助于新手阅读代码。属性特性的顺序应该是storage、atomicity，与在Interface Builder连接UI元素时自动生成代码一致。</p><p><strong>推荐使用:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIView</span> *containerView;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *tutorialName;</span><br></pre></td></tr></table></figure><p><strong>不推荐使用:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIView</span> *containerView;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *tutorialName;</span><br></pre></td></tr></table></figure><p>NSString应该使用copy而不是strong的属性特性。</p><p>具有可变属性的 (例如： NSString) 应该优先使用 <code>copy</code> 而不是 <code>strong</code>。为什么？即使你声明一个<code>NSString</code>的属性，有人可能传入一个<code>NSMutableString</code>的实例，然后在你没有注意的情况下修改它。</p><p><strong>建议使用:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *tutorialName;</span><br></pre></td></tr></table></figure><p><strong>不建议使用:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *tutorialName;</span><br></pre></td></tr></table></figure><h2 id="点符号语法"><a href="#点符号语法" class="headerlink" title="点符号语法"></a>点符号语法</h2><p>点语法是一种很方便封装访问方法调用的方式。当你使用点语法时，通过使用getter或setter方法，属性仍然被访问或修改。想了解更多，阅读<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvaW9zL2RvY3VtZW50YXRpb24vY29jb2EvY29uY2VwdHVhbC9Qcm9ncmFtbWluZ1dpdGhPYmplY3RpdmVDL0VuY2Fwc3VsYXRpbmdEYXRhL0VuY2Fwc3VsYXRpbmdEYXRhLmh0bWw="><i class="fa fa-external-link"></i> 这里</span>。</p><p>点语法应该<strong>总是</strong>被用来访问和修改属性，因为它使代码更加简洁。[]符号更偏向于用在其他例子。</p><p><strong>建议使用:</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSInteger</span> arrayCount = [<span class="keyword">self</span>.array count];</span><br><span class="line">view.backgroundColor = [<span class="built_in">UIColor</span> orangeColor];</span><br><span class="line">[<span class="built_in">UIApplication</span> sharedApplication].delegate;</span><br></pre></td></tr></table></figure></p><p><strong>不建议使用:</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSInteger</span> arrayCount = <span class="keyword">self</span>.array.count;</span><br><span class="line">[view setBackgroundColor:[<span class="built_in">UIColor</span> orangeColor]];</span><br><span class="line"><span class="built_in">UIApplication</span>.sharedApplication.delegate;</span><br></pre></td></tr></table></figure></p><h2 id="字面值"><a href="#字面值" class="headerlink" title="字面值"></a>字面值</h2><p><code>NSString</code>, <code>NSDictionary</code>, <code>NSArray</code>和<code>NSNumber</code>的字面值应该在创建这些类的不可变实例时被使用。请特别注意<code>nil</code>值不能传入<code>NSArray</code>和<code>NSDictionary</code>字面值，因为这样会导致crash。</p><p><strong>建议使用:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *names = @[<span class="string">@"Brian"</span>, <span class="string">@"Matt"</span>, <span class="string">@"Chris"</span>, <span class="string">@"Alex"</span>, <span class="string">@"Steve"</span>, <span class="string">@"Paul"</span>];</span><br><span class="line"><span class="built_in">NSDictionary</span> *productManagers = @&#123;<span class="string">@"iPhone"</span>: <span class="string">@"Kate"</span>, <span class="string">@"iPad"</span>: <span class="string">@"Kamal"</span>, <span class="string">@"Mobile Web"</span>: <span class="string">@"Bill"</span>&#125;;</span><br><span class="line"><span class="built_in">NSNumber</span> *shouldUseLiterals = @YES;</span><br><span class="line"><span class="built_in">NSNumber</span> *buildingStreetNumber = @<span class="number">10018</span>;</span><br></pre></td></tr></table></figure><p><strong>不建议使用:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *names = [<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@"Brian"</span>, <span class="string">@"Matt"</span>, <span class="string">@"Chris"</span>, <span class="string">@"Alex"</span>, <span class="string">@"Steve"</span>, <span class="string">@"Paul"</span>, <span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">NSDictionary</span> *productManagers = [<span class="built_in">NSDictionary</span> dictionaryWithObjectsAndKeys: <span class="string">@"Kate"</span>, <span class="string">@"iPhone"</span>, <span class="string">@"Kamal"</span>, <span class="string">@"iPad"</span>, <span class="string">@"Bill"</span>, <span class="string">@"Mobile Web"</span>, <span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">NSNumber</span> *shouldUseLiterals = [<span class="built_in">NSNumber</span> numberWithBool:<span class="literal">YES</span>];</span><br><span class="line"><span class="built_in">NSNumber</span> *buildingStreetNumber = [<span class="built_in">NSNumber</span> numberWithInteger:<span class="number">10018</span>];</span><br></pre></td></tr></table></figure><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量是容易重复被使用和无需通过查找和代替就能快速修改值。常量应该使用<code>static</code>来声明而不是使用<code>#define</code>，除非显式地使用宏。</p><p><strong>建议使用:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> RWTAboutViewControllerCompanyName = <span class="string">@"RayWenderlich.com"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">CGFloat</span> <span class="keyword">const</span> RWTImageThumbnailHeight = <span class="number">50.0</span>;</span><br></pre></td></tr></table></figure><p><strong>不建议使用:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#define CompanyName @<span class="meta-string">"RayWenderlich.com"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#define thumbnailHeight 2</span></span><br></pre></td></tr></table></figure><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><p>当使用<code>enum</code>时，推荐使用新的固定基本类型规格，因为它有更强的类型检查和代码补全。现在SDK有一个宏<code>NS_ENUM()</code>来帮助和鼓励你使用固定的基本类型。</p><p><strong>例如:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, RWTLeftMenuTopItemType) &#123;</span><br><span class="line">  RWTLeftMenuTopItemMain,</span><br><span class="line">  RWTLeftMenuTopItemShows,</span><br><span class="line">  RWTLeftMenuTopItemSchedule</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>你也可以显式地赋值(展示旧的k-style常量定义)：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, RWTGlobalConstants) &#123;</span><br><span class="line">  RWTPinSizeMin = <span class="number">1</span>,</span><br><span class="line">  RWTPinSizeMax = <span class="number">5</span>,</span><br><span class="line">  RWTPinCountMin = <span class="number">100</span>,</span><br><span class="line">  RWTPinCountMax = <span class="number">500</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>旧的k-style常量定义应该<strong>避免</strong>除非编写Core Foundation C的代码。</p><p><strong>不建议使用:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> GlobalConstants &#123;</span><br><span class="line">  kMaxPinSize = <span class="number">5</span>,</span><br><span class="line">  kMaxPinCount = <span class="number">500</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Case语句"><a href="#Case语句" class="headerlink" title="Case语句"></a>Case语句</h2><p>大括号在case语句中并不是必须的，除非编译器强制要求。<br>当一个case语句包含多行代码时，大括号应该加上。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (condition) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// Multi-line example using braces</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>: </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有很多次，当相同代码被多个cases使用时，一个fall-through应该被使用。一个fall-through就是在case最后移除’break’语句，这样就能够允许执行流程跳转到下一个case值。为了代码更加清晰，一个fall-through需要注释一下。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (condition) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="comment">// ** fall-through! **</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="comment">// code executed for values 1 and 2</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>: </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当在switch使用枚举类型时，’default’是不需要的。例如：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">RWTLeftMenuTopItemType menuType = RWTLeftMenuTopItemMain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (menuType) &#123;</span><br><span class="line">  <span class="keyword">case</span> RWTLeftMenuTopItemMain:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> RWTLeftMenuTopItemShows:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> RWTLeftMenuTopItemSchedule:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h2><p>私有属性应该在类的实现文件中的类扩展(匿名分类)中声明，命名分类(比如<code>RWTPrivate</code>或<code>private</code>)应该从不使用除非是扩展其他类。匿名分类应该通过使用<headerfile>+Private.h文件的命名规则暴露给测试。</headerfile></p><p><strong>例如:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RWTDetailViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) GADBannerView *googleAdView;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) ADBannerView *iAdView;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIWebView</span> *adXWebView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><p>Objective-C使用<code>YES</code>和<code>NO</code>。因为<code>true</code>和<code>false</code>应该只在CoreFoundation，C或C++代码使用。既然<code>nil</code>解析成NO，所以没有必要在条件语句比较。不要拿某样东西直接与<code>YES</code>比较，因为<code>YES</code>被定义为1和一个<code>BOOL</code>能被设置为8位。</p><p>这是为了在不同文件保持一致性和在视觉上更加简洁而考虑。</p><p><strong>建议使用:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (someObject) &#123;&#125;</span><br><span class="line"><span class="keyword">if</span> (![anotherObject boolValue]) &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>不建议使用:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (someObject == <span class="literal">nil</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">if</span> ([anotherObject boolValue] == <span class="literal">NO</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">if</span> (isAwesome == <span class="literal">YES</span>) &#123;&#125; <span class="comment">// Never do this.</span></span><br><span class="line"><span class="keyword">if</span> (isAwesome == <span class="literal">true</span>) &#123;&#125; <span class="comment">// Never do this.</span></span><br></pre></td></tr></table></figure><p>如果<code>BOOL</code>属性的名字是一个形容词，属性就能忽略”is”前缀，但要指定get访问器的惯用名称。例如：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">getter</span>=isEditable) <span class="built_in">BOOL</span> editable;</span><br></pre></td></tr></table></figure><p>文字和例子从这里引用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvbWFjLyNkb2N1bWVudGF0aW9uL0NvY29hL0NvbmNlcHR1YWwvQ29kaW5nR3VpZGVsaW5lcy9BcnRpY2xlcy9OYW1pbmdJdmFyc0FuZFR5cGVzLmh0bWwjLy9hcHBsZV9yZWYvZG9jL3VpZC8yMDAwMTI4NC1CQUpHSUlKRQ=="><i class="fa fa-external-link"></i> Cocoa Naming Guidelines</span>。</p><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><p>条件语句主体为了防止出错应该使用大括号包围，即使条件语句主体能够不用大括号编写(如：只用一行代码)。这些错误包括添加第二行代码和期望它成为条件语句；还有，<span class="exturl" data-url="aHR0cDovL3Byb2dyYW1tZXJzLnN0YWNrZXhjaGFuZ2UuY29tL2EvMTY1MzA="><i class="fa fa-external-link"></i> even more dangerous defect</span>可能发生在条件语句里面一行代码被注释了，然后下一行代码不知不觉地成为条件语句的一部分。除此之外，这种风格与其他条件语句的风格保持一致，所以更加容易阅读。</p><p><strong>建议使用:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!error) &#123;</span><br><span class="line">  <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>不建议使用:</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!error)</span><br><span class="line">  <span class="keyword">return</span> success;</span><br></pre></td></tr></table></figure></p><p>or</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!error) <span class="keyword">return</span> success;</span><br></pre></td></tr></table></figure><h3 id="三元操作符"><a href="#三元操作符" class="headerlink" title="三元操作符"></a>三元操作符</h3><p>当需要提高代码的清晰性和简洁性时，三元操作符<code>?:</code>才会使用。单个条件求值常常需要它。多个条件求值时，如果使用<code>if</code>语句或重构成实例变量时，代码会更加易读。一般来说，最好使用三元操作符是在根据条件来赋值的情况下。</p><p>Non-boolean的变量与某东西比较，加上括号()会提高可读性。如果被比较的变量是boolean类型，那么就不需要括号。</p><p><strong>建议使用:</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSInteger</span> value = <span class="number">5</span>;</span><br><span class="line">result = (value != <span class="number">0</span>) ? x : y;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BOOL</span> isHorizontal = <span class="literal">YES</span>;</span><br><span class="line">result = isHorizontal ? x : y;</span><br></pre></td></tr></table></figure></p><p><strong>不建议使用:</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = a &gt; b ? x = c &gt; d ? c : d : y;</span><br></pre></td></tr></table></figure></p><h2 id="Init方法"><a href="#Init方法" class="headerlink" title="Init方法"></a>Init方法</h2><p>Init方法应该遵循Apple生成代码模板的命名规则，返回类型应该使用<code>instancetype</code>而不是<code>id</code>。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">  <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>See <a href="#class-constructor-methods">Class Constructor Methods</a> for link to article on instancetype.</p><h2 id="类构造方法"><a href="#类构造方法" class="headerlink" title="类构造方法"></a>类构造方法</h2><p>当类构造方法被使用时，它应该返回类型是<code>instancetype</code>而不是<code>id</code>。这样确保编译器正确地推断结果类型。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Airplane</span></span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)airplaneWithType:(RWTAirplaneType)type;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>关于更多instancetype信息，请查看<span class="exturl" data-url="aHR0cDovL25zaGlwc3Rlci5jb20vaW5zdGFuY2V0eXBlLw=="><i class="fa fa-external-link"></i> NSHipster.com</span>。</p><h2 id="CGRect函数"><a href="#CGRect函数" class="headerlink" title="CGRect函数"></a>CGRect函数</h2><p>当访问CGRect里的<code>x</code>, <code>y</code>, <code>width</code>, 或 <code>height</code>时，应该使用<span class="exturl" data-url="aHR0cDovL2RldmVsb3Blci5hcHBsZS5jb20vbGlicmFyeS9pb3MvI2RvY3VtZW50YXRpb24vZ3JhcGhpY3NpbWFnaW5nL3JlZmVyZW5jZS9DR0dlb21ldHJ5L1JlZmVyZW5jZS9yZWZlcmVuY2UuaHRtbA=="><i class="fa fa-external-link"></i> CGGeometry函数</span>而不是直接通过结构体来访问。引用Apple的<code>CGGeometry</code>：</p><blockquote><p>在这个参考文档中所有的函数，接受CGRect结构体作为输入，在计算它们结果时隐式地标准化这些rectangles。因此，你的应用程序应该避免直接访问和修改保存在CGRect数据结构中的数据。相反，使用这些函数来操纵rectangles和获取它们的特性。</p></blockquote><p><strong>建议使用:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CGRect</span> frame = <span class="keyword">self</span>.view.frame;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CGFloat</span> x = <span class="built_in">CGRectGetMinX</span>(frame);</span><br><span class="line"><span class="built_in">CGFloat</span> y = <span class="built_in">CGRectGetMinY</span>(frame);</span><br><span class="line"><span class="built_in">CGFloat</span> width = <span class="built_in">CGRectGetWidth</span>(frame);</span><br><span class="line"><span class="built_in">CGFloat</span> height = <span class="built_in">CGRectGetHeight</span>(frame);</span><br><span class="line"><span class="built_in">CGRect</span> frame = <span class="built_in">CGRectMake</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, width, height);</span><br></pre></td></tr></table></figure><p><strong>不建议使用:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CGRect</span> frame = <span class="keyword">self</span>.view.frame;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CGFloat</span> x = frame.origin.x;</span><br><span class="line"><span class="built_in">CGFloat</span> y = frame.origin.y;</span><br><span class="line"><span class="built_in">CGFloat</span> width = frame.size.width;</span><br><span class="line"><span class="built_in">CGFloat</span> height = frame.size.height;</span><br><span class="line"><span class="built_in">CGRect</span> frame = (<span class="built_in">CGRect</span>)&#123; .origin = <span class="built_in">CGPointZero</span>, .size = frame.size &#125;;</span><br></pre></td></tr></table></figure><h2 id="黄金路径"><a href="#黄金路径" class="headerlink" title="黄金路径"></a>黄金路径</h2><p>当使用条件语句编码时，左手边的代码应该是”golden” 或 “happy”路径。也就是不要嵌套<code>if</code>语句，多个返回语句也是OK。</p><p><strong>建议使用:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)someMethod &#123;</span><br><span class="line">  <span class="keyword">if</span> (![someOther boolValue]) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Do something important</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>不建议使用:</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)someMethod &#123;</span><br><span class="line">  <span class="keyword">if</span> ([someOther boolValue]) &#123;</span><br><span class="line">    <span class="comment">//Do something important</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>当方法通过引用来返回一个错误参数，判断返回值而不是错误变量。</p><p><strong>建议使用:</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSError</span> *error;</span><br><span class="line"><span class="keyword">if</span> (![<span class="keyword">self</span> trySomethingWithError:&amp;error]) &#123;</span><br><span class="line">  <span class="comment">// Handle Error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>不建议使用:</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSError</span> *error;</span><br><span class="line">[<span class="keyword">self</span> trySomethingWithError:&amp;error];</span><br><span class="line"><span class="keyword">if</span> (error) &#123;</span><br><span class="line">  <span class="comment">// Handle Error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在成功的情况下，有些Apple的APIs记录垃圾值(garbage values)到错误参数(如果non-NULL)，那么判断错误值会导致false负值和crash。</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例对象应该使用线程安全模式来创建共享实例。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">instancetype</span>)sharedInstance &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">id</span> sharedInstance = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">  <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">    sharedInstance = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sharedInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样会防止<span class="exturl" data-url="aHR0cDovL2NvY29hc2FtdXJhaS5ibG9nc3BvdC5jb20vMjAxMS8wNC9zaW5nbGV0b25zLXlvdXItZG9pbmctdGhlbS13cm9uZy5odG1s"><i class="fa fa-external-link"></i> possible and sometimes prolific crashes</span>。</p><h2 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h2><p>换行符是一个很重要的主题，因为它的风格指南主要为了打印和网上的可读性。</p><p>例如:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.productsRequest = [[<span class="built_in">SKProductsRequest</span> alloc] initWithProductIdentifiers:productIdentifiers];</span><br></pre></td></tr></table></figure></p><p>一行很长的代码应该分成两行代码，下一行用两个空格隔开。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.productsRequest = [[<span class="built_in">SKProductsRequest</span> alloc] </span><br><span class="line">  initWithProductIdentifiers:productIdentifiers];</span><br></pre></td></tr></table></figure><h2 id="Xcode工程"><a href="#Xcode工程" class="headerlink" title="Xcode工程"></a>Xcode工程</h2><p><strong>此条可不实现</strong></p><p>物理文件应该与Xcode工程文件保持同步来避免文件扩张。任何Xcode分组的创建应该在文件系统的文件体现。代码不仅是根据类型来分组，而且还可以根据功能来分组，这样代码更加清晰。</p><p>尽可能在target的Build Settings打开”Treat Warnings as Errors，和启用以下<span class="exturl" data-url="aHR0cDovL2JvcmVkem8ub3JnL2Jsb2cvYXJjaGl2ZXMvMjAwOS0xMS0wNy93YW5pbmdz"><i class="fa fa-external-link"></i> additional warnings</span>。如果你需要忽略特殊的警告，使用<span class="exturl" data-url="aHR0cDovL2NsYW5nLmxsdm0ub3JnL2RvY3MvVXNlcnNNYW51YWwuaHRtbCNjb250cm9sbGluZy1kaWFnbm9zdGljcy12aWEtcHJhZ21hcw=="><i class="fa fa-external-link"></i> Clang's pragma feature</span>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#语言&quot;&gt;语言&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#代码组织&quot;&gt;代码组织&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#空格&quot;&gt;空格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#注释&quot;&gt;注释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#命名&quot;&gt;命名&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#下划线&quot;&gt;下划线&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#方法&quot;&gt;方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#变量&quot;&gt;变量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#属性特性&quot;&gt;属性特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#点符号语法&quot;&gt;点符号语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#字面值&quot;&gt;字面值&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#常量&quot;&gt;常量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#枚举类型&quot;&gt;枚举类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Case语句&quot;&gt;Case语句&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#私有属性&quot;&gt;私有属性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#布尔值&quot;&gt;布尔值&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#条件语句&quot;&gt;条件语句&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#三元操作符&quot;&gt;三元操作符&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Init方法&quot;&gt;Init方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#类构造方法&quot;&gt;类构造方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#CGRect函数&quot;&gt;CGRect函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#黄金路径&quot;&gt;黄金路径&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#错误处理&quot;&gt;错误处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#单例模式&quot;&gt;单例模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#换行符&quot;&gt;换行符&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Xcode工程&quot;&gt;Xcode工程&lt;/a&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://muyizl.github.io/categories/Objective-C/"/>
    
    
      <category term="Style" scheme="https://muyizl.github.io/tags/Style/"/>
    
      <category term="Guides" scheme="https://muyizl.github.io/tags/Guides/"/>
    
  </entry>
  
  <entry>
    <title>基于Github Pages和Hexo搭建个人博客</title>
    <link href="https://muyizl.github.io/2017/12/19/hexo-github-pages/"/>
    <id>https://muyizl.github.io/2017/12/19/hexo-github-pages/</id>
    <published>2017-12-19T06:40:17.000Z</published>
    <updated>2019-03-04T03:37:31.634Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>笨蛋自以为聪明，聪明人才知道自己是笨蛋。 —— 莎士比亚 </p></blockquote><h2 id><a href="#" class="headerlink" title></a><span class="exturl"><i class="fa fa-external-link"></i> GitHub Pages</span></h2><div class="tabs" id="pages"><ul class="nav-tabs"></ul><div class="tab-content"></div></div><h2 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h2><h4 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h4><p>前往购买域名的网站，笔者是在<a href="http://www.cndns.com/" target="_blank" rel="noopener">美橙互联</a>购买的域名，建议大家去<a href="https://sg.godaddy.com/" target="_blank" rel="noopener">GoDaddy</a>购买，第一年很便宜。</p><h4 id="申请免费域名"><a href="#申请免费域名" class="headerlink" title="申请免费域名"></a>申请免费域名</h4><p><a href="http://www.point.ml/" target="_blank" rel="noopener">.ML免费域名申请注册</a> 、<a href="http://www.dot.cf/" target="_blank" rel="noopener">.CF免费域名申请注册</a>、<a href="http://www.dot.ga/" target="_blank" rel="noopener">.GA免费域名申请注册</a>、<a href="http://www.dot.tk" target="_blank" rel="noopener">.TK免费域名申请注册</a><br>申请域名都比较简单，实在不会就百度一下，很多教程，TK域名算是一个老牌的域名了，据说目前活跃的域名超过1600万个，这里估计国人也贡献了不少。</p><p>将自己的域名和Github Pages绑定，需要做以下几件事情：<br><a id="more"></a></p><h3 id="修改域名DNS"><a href="#修改域名DNS" class="headerlink" title="修改域名DNS"></a>修改域名DNS</h3><p>详情：修改你的域名DNS为f1g1ns1.dnspod.net 和 f1g1ns2.dnspod.net 。</p><h3 id="创建CNAME文件"><a href="#创建CNAME文件" class="headerlink" title="创建CNAME文件"></a>创建CNAME文件</h3><p>详情：在你的本站点目录的source目录下添加一个CNAME文件，以文本编辑器打开，里面添加你的域名信息（不带有http），如笔者域名：zlyunduan.com 。</p><h3 id="配置DNSPOD"><a href="#配置DNSPOD" class="headerlink" title="配置DNSPOD"></a>配置DNSPOD</h3><p>详情：前往<a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNSPOD官网</a>注册，并添加域名，添加成功后点击域名链接，进入域名记录界面添加三条如下记录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">主机记录：@ 记录类型：A 记录值：192.30.252.153</span><br><span class="line">主机记录：@ 记录类型：A 记录值：192.30.252.154</span><br><span class="line">主机记录：www 记录类型：CNAME 记录值：你的github pages地址</span><br></pre></td></tr></table></figure><h3 id="更新Hexo"><a href="#更新Hexo" class="headerlink" title="更新Hexo"></a>更新Hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd hexo 当前目录</span><br><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>详情：将修改后的hexo相关文件提交后，即可使用自己的域名访问blog了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;笨蛋自以为聪明，聪明人才知道自己是笨蛋。 —— 莎士比亚 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;span class=&quot;exturl&quot;&gt;&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt; GitHub Pages&lt;/span&gt;&lt;/h2&gt;&lt;div class=&quot;tabs&quot; id=&quot;pages&quot;&gt;&lt;ul class=&quot;nav-tabs&quot;&gt;&lt;/ul&gt;&lt;div class=&quot;tab-content&quot;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;域名绑定&quot;&gt;&lt;a href=&quot;#域名绑定&quot; class=&quot;headerlink&quot; title=&quot;域名绑定&quot;&gt;&lt;/a&gt;域名绑定&lt;/h2&gt;&lt;h4 id=&quot;购买域名&quot;&gt;&lt;a href=&quot;#购买域名&quot; class=&quot;headerlink&quot; title=&quot;购买域名&quot;&gt;&lt;/a&gt;购买域名&lt;/h4&gt;&lt;p&gt;前往购买域名的网站，笔者是在&lt;a href=&quot;http://www.cndns.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;美橙互联&lt;/a&gt;购买的域名，建议大家去&lt;a href=&quot;https://sg.godaddy.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GoDaddy&lt;/a&gt;购买，第一年很便宜。&lt;/p&gt;
&lt;h4 id=&quot;申请免费域名&quot;&gt;&lt;a href=&quot;#申请免费域名&quot; class=&quot;headerlink&quot; title=&quot;申请免费域名&quot;&gt;&lt;/a&gt;申请免费域名&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://www.point.ml/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;.ML免费域名申请注册&lt;/a&gt; 、&lt;a href=&quot;http://www.dot.cf/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;.CF免费域名申请注册&lt;/a&gt;、&lt;a href=&quot;http://www.dot.ga/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;.GA免费域名申请注册&lt;/a&gt;、&lt;a href=&quot;http://www.dot.tk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;.TK免费域名申请注册&lt;/a&gt;&lt;br&gt;申请域名都比较简单，实在不会就百度一下，很多教程，TK域名算是一个老牌的域名了，据说目前活跃的域名超过1600万个，这里估计国人也贡献了不少。&lt;/p&gt;
&lt;p&gt;将自己的域名和Github Pages绑定，需要做以下几件事情：&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://muyizl.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://muyizl.github.io/tags/Hexo/"/>
    
      <category term="Github Pages" scheme="https://muyizl.github.io/tags/Github-Pages/"/>
    
      <category term="William Shakespeare" scheme="https://muyizl.github.io/tags/William-Shakespeare/"/>
    
  </entry>
  
</feed>
